@using ModularCMS.Core.Services
@using community_management_system.Api.Models
@using MudBlazor
@using Microsoft.EntityFrameworkCore
@using ModularCMS.Core.Data
@using ModularCMS.Core.Data.Dto
@inject AppDbContext DbContext
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        @if (_isLoading)
        {
            <MudText Typo="Typo.h6">Loading...</MudText>
        }
        else if (_editUserDto != null)
        {
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" />
                Editing: @_editUserDto.Full_Name
            </MudText>
        }
    </TitleContent>
    <DialogContent>
        @if (_isLoading)
        {
            <div class="d-flex justify-center align-center py-8">
                <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
            </div>
        }
        else if (!string.IsNullOrEmpty(_errorMessage))
        {
            <MudAlert Severity="Severity.Error" Class="my-4">@_errorMessage</MudAlert>
        }
        else if (_editUserDto != null)
        {
            <MudForm @ref="_form" Model="@_editUserDto">
                <MudGrid Spacing="2">
                    <MudItem xs="12" sm="6">
                        <MudTextField T="string" @bind-Value="@_editUserDto.FirstName" Label="First Name" Required="true" RequiredError="First Name is required!" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField T="string" @bind-Value="@_editUserDto.MiddleName" Label="Middle Name" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField T="string" @bind-Value="@_editUserDto.LastName" Label="Last Name" Required="true" RequiredError="Last Name is required!" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudSelect T="string" @bind-Value="@_editUserDto.Suffix" Label="Suffix">
                            <MudSelectItem T="string" Value="@(null)">None</MudSelectItem>
                            <MudSelectItem Value="@("Jr.")">Jr.</MudSelectItem>
                            <MudSelectItem Value="@("Sr.")">Sr.</MudSelectItem>
                            <MudSelectItem Value="@("II")">II</MudSelectItem>
                            <MudSelectItem Value="@("III")">III</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField T="string" @bind-Value="@_editUserDto.Username" Label="Username" Required="true" RequiredError="Username is required!" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField T="string" @bind-Value="@_editUserDto.Email" Label="Email" InputType="InputType.Email" Required="true" RequiredError="Email is required!" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudSelect T="string" @bind-Value="@_editUserDto.Gender" Label="Gender" Required="true" RequiredError="Gender is required!">
                            <MudSelectItem Value="@("Male")" />
                            <MudSelectItem Value="@("Female")" />
                            <MudSelectItem Value="@("Other")" />
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudSelect T="string" @bind-Value="@_editUserDto.Role" Label="Role" Required="true" RequiredError="Role is required!">
                            <MudSelectItem Value="@("SuperAdmin")" />
                            <MudSelectItem Value="@("Kapitan")" />
                            <MudSelectItem Value="@("Kagawad")" />
                            <MudSelectItem Value="@("Secretary")" />
                            <MudSelectItem Value="@("Treasurer")" />
                            <MudSelectItem Value="@("Encoder")" />
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </MudForm>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Error" @onclick="HandleToggleUserStatus" Disabled="@_isRemoving">
            @if (_isRemoving)
            {
                <MudProgressCircular Class="me-2" Indeterminate="true" Size="Size.Small" />
            }
            @(_editUserDto != null && _editUserDto.Is_Active ? "Deactivate User" : "Reactivate User")
        </MudButton>
        <MudButton Variant="Variant.Text" Color="Color.Default" OnClick="() => MudDialog.Cancel()">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="HandleUpdateUser" Disabled="@_editInProgress">
            @if (_editInProgress)
            {
                <MudProgressCircular Class="me-2" Indeterminate="true" Size="Size.Small" />
            }
            Update
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public int EmployeeId { get; set; }

    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;

    private EditUserDto _editUserDto;
    private MudForm _form;
    private bool _isLoading = true;
    private bool _editInProgress = false;
    private bool _isRemoving = false;
    private string _errorMessage = "";

    public class EditUserDto
    {
        public int Employee_ID { get; set; }
        public int User_ID { get; set; }
        public string FirstName { get; set; }
        public string MiddleName { get; set; }
        public string LastName { get; set; }
        public string Suffix { get; set; }
        public string Full_Name => $"{FirstName} {MiddleName} {LastName} {Suffix}".Trim();
        public string Gender { get; set; }
        public string Role { get; set; }
        public string Username { get; set; }
        public string Email { get; set; }
        public bool Is_Active { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadUserDataAsync();
    }

    private async Task LoadUserDataAsync()
    {
        _isLoading = true;
        _errorMessage = string.Empty;

        try
        {
            var data = await DbContext.Employees
                .Where(e => e.Employee_ID == EmployeeId)
                .Join(DbContext.Users,
                    employee => employee.User_ID,
                    user => user.User_ID,
                    (employee, user) => new EditUserDto
                    {
                        Employee_ID = employee.Employee_ID,
                        User_ID = user.User_ID,
                        FirstName = employee.First_Name,
                        MiddleName = employee.Middle_Name,
                        LastName = employee.Last_Name,
                        Suffix = employee.Suffix,
                        Gender = employee.Gender,
                        Role = employee.Role,
                        Username = user.Username,
                        Email = user.Email,
                        Is_Active = user.Is_Active
                    })
                .FirstOrDefaultAsync();

            if (data == null)
            {
                _errorMessage = "Employee not found.";
                Snackbar.Add("Employee details not found.", Severity.Warning);
            }
            else
            {
                _editUserDto = data;
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
            Snackbar.Add(_errorMessage, Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task HandleUpdateUser()
    {
        await _form.Validate();
        if (_form.IsValid)
        {
            _editInProgress = true;
            try
            {
                var employee = await DbContext.Employees.FirstOrDefaultAsync(e => e.Employee_ID == _editUserDto.Employee_ID);
                var user = await DbContext.Users.FirstOrDefaultAsync(u => u.User_ID == _editUserDto.User_ID);

                if (employee != null && user != null)
                {
                    employee.First_Name = _editUserDto.FirstName;
                    employee.Middle_Name = _editUserDto.MiddleName;
                    employee.Last_Name = _editUserDto.LastName;
                    employee.Suffix = _editUserDto.Suffix;
                    employee.Gender = _editUserDto.Gender;
                    employee.Role = _editUserDto.Role;

                    user.Username = _editUserDto.Username;
                    user.Email = _editUserDto.Email;

                    await DbContext.SaveChangesAsync();
                    Snackbar.Add($"User '{_editUserDto.Full_Name}' updated successfully!", Severity.Success);
                    MudDialog.Close(DialogResult.Ok(true));
                }
                else
                {
                    Snackbar.Add("User not found for update.", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error updating user: {ex.Message}", Severity.Error);
            }
            finally
            {
                _editInProgress = false;
            }
        }
    }

    private async Task HandleToggleUserStatus()
    {
        string title = _editUserDto.Is_Active ? "Confirm Deactivation" : "Confirm Reactivation";
        string message = _editUserDto.Is_Active ? "Are you sure you want to deactivate this user? They will no longer be able to log in, but their data will be retained." : "Are you sure you want to reactivate this user? They will regain access to their account.";
        string yesText = _editUserDto.Is_Active ? "Yes, Deactivate" : "Yes, Reactivate";

        bool? result = await DialogService.ShowMessageBox(
            title,
            message,
            yesText: yesText,
            cancelText: "Cancel"
        );

        if (result == true)
        {
            _isRemoving = true;
            try
            {
                var user = await DbContext.Users.FirstOrDefaultAsync(u => u.User_ID == _editUserDto.User_ID);

                if (user != null)
                {
                    user.Is_Active = !_editUserDto.Is_Active;
                    await DbContext.SaveChangesAsync();

                    _editUserDto.Is_Active = user.Is_Active;

                    string action = user.Is_Active ? "reactivated" : "deactivated";
                    Snackbar.Add($"User '{_editUserDto.Full_Name}' {action} successfully!", Severity.Success);
                    MudDialog.Close(DialogResult.Ok(true));
                }
                else
                {
                    Snackbar.Add("User not found for status change.", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error changing user status: {ex.Message}", Severity.Error);
            }
            finally
            {
                _isRemoving = false;
            }
        }
    }
}
